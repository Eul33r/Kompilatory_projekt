// Generated from MathExpr.g4 by ANTLR 4.13.1
// jshint ignore: start
const antlr4 = require('antlr4');
const MathExprLexer = require('./MathExprLexer.js');
const MathExprParser = require('./MathExprParser.js');


const serializedATN = [4,0,26,143,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,1,
1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,
1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,
14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,
1,17,1,18,1,18,1,18,1,18,1,19,4,19,110,8,19,11,19,12,19,111,1,20,4,20,115,
8,20,11,20,12,20,116,1,20,1,20,4,20,121,8,20,11,20,12,20,122,1,21,1,21,1,
21,1,22,1,22,1,23,1,23,1,24,4,24,133,8,24,11,24,12,24,134,1,25,4,25,138,
8,25,11,25,12,25,139,1,25,1,25,0,0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
21,43,22,45,23,47,24,49,25,51,26,1,0,3,1,0,48,57,2,0,65,90,97,122,3,0,9,
10,13,13,32,32,147,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,
21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,1,53,1,0,0,0,
3,55,1,0,0,0,5,57,1,0,0,0,7,59,1,0,0,0,9,61,1,0,0,0,11,63,1,0,0,0,13,65,
1,0,0,0,15,68,1,0,0,0,17,70,1,0,0,0,19,72,1,0,0,0,21,74,1,0,0,0,23,76,1,
0,0,0,25,80,1,0,0,0,27,84,1,0,0,0,29,88,1,0,0,0,31,93,1,0,0,0,33,97,1,0,
0,0,35,101,1,0,0,0,37,104,1,0,0,0,39,109,1,0,0,0,41,114,1,0,0,0,43,124,1,
0,0,0,45,127,1,0,0,0,47,129,1,0,0,0,49,132,1,0,0,0,51,137,1,0,0,0,53,54,
5,43,0,0,54,2,1,0,0,0,55,56,5,45,0,0,56,4,1,0,0,0,57,58,5,42,0,0,58,6,1,
0,0,0,59,60,5,47,0,0,60,8,1,0,0,0,61,62,5,37,0,0,62,10,1,0,0,0,63,64,5,94,
0,0,64,12,1,0,0,0,65,66,5,42,0,0,66,67,5,42,0,0,67,14,1,0,0,0,68,69,5,40,
0,0,69,16,1,0,0,0,70,71,5,41,0,0,71,18,1,0,0,0,72,73,5,124,0,0,73,20,1,0,
0,0,74,75,5,44,0,0,75,22,1,0,0,0,76,77,5,115,0,0,77,78,5,105,0,0,78,79,5,
110,0,0,79,24,1,0,0,0,80,81,5,99,0,0,81,82,5,111,0,0,82,83,5,115,0,0,83,
26,1,0,0,0,84,85,5,116,0,0,85,86,5,97,0,0,86,87,5,110,0,0,87,28,1,0,0,0,
88,89,5,115,0,0,89,90,5,113,0,0,90,91,5,114,0,0,91,92,5,116,0,0,92,30,1,
0,0,0,93,94,5,97,0,0,94,95,5,98,0,0,95,96,5,115,0,0,96,32,1,0,0,0,97,98,
5,101,0,0,98,99,5,120,0,0,99,100,5,112,0,0,100,34,1,0,0,0,101,102,5,108,
0,0,102,103,5,110,0,0,103,36,1,0,0,0,104,105,5,108,0,0,105,106,5,111,0,0,
106,107,5,103,0,0,107,38,1,0,0,0,108,110,7,0,0,0,109,108,1,0,0,0,110,111,
1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,40,1,0,0,0,113,115,7,0,0,0,114,
113,1,0,0,0,115,116,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,118,1,0,
0,0,118,120,5,46,0,0,119,121,7,0,0,0,120,119,1,0,0,0,121,122,1,0,0,0,122,
120,1,0,0,0,122,123,1,0,0,0,123,42,1,0,0,0,124,125,5,112,0,0,125,126,5,105,
0,0,126,44,1,0,0,0,127,128,5,101,0,0,128,46,1,0,0,0,129,130,5,105,0,0,130,
48,1,0,0,0,131,133,7,1,0,0,132,131,1,0,0,0,133,134,1,0,0,0,134,132,1,0,0,
0,134,135,1,0,0,0,135,50,1,0,0,0,136,138,7,2,0,0,137,136,1,0,0,0,138,139,
1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,141,1,0,0,0,141,142,6,25,0,0,
142,52,1,0,0,0,6,0,111,116,122,134,139,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class MathExprLexer extends antlr4.Lexer {

    static grammarFileName = "MathExpr.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", 
                         "'**'", "'('", "')'", "'|'", "','", "'sin'", "'cos'", 
                         "'tan'", "'sqrt'", "'abs'", "'exp'", "'ln'", "'log'", 
                         null, null, "'pi'", "'e'", "'i'" ];
	static symbolicNames = [ null, "PLUS", "MINUS", "MUL", "DIV", "MOD", "EXP", 
                          "POW", "LPAREN", "RPAREN", "PIPE", "COMMA", "SIN", 
                          "COS", "TAN", "SQRT", "ABS", "EXPONENTIAL", "LN", 
                          "LOG", "INTEGER", "FLOAT", "PI", "EULER", "IMAGINARY_UNIT", 
                          "IDENTIFIER", "WS" ];
	static ruleNames = [ "PLUS", "MINUS", "MUL", "DIV", "MOD", "EXP", "POW", 
                      "LPAREN", "RPAREN", "PIPE", "COMMA", "SIN", "COS", 
                      "TAN", "SQRT", "ABS", "EXPONENTIAL", "LN", "LOG", 
                      "INTEGER", "FLOAT", "PI", "EULER", "IMAGINARY_UNIT", 
                      "IDENTIFIER", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

MathExprLexer.EOF = antlr4.Token.EOF;
MathExprLexer.PLUS = 1;
MathExprLexer.MINUS = 2;
MathExprLexer.MUL = 3;
MathExprLexer.DIV = 4;
MathExprLexer.MOD = 5;
MathExprLexer.EXP = 6;
MathExprLexer.POW = 7;
MathExprLexer.LPAREN = 8;
MathExprLexer.RPAREN = 9;
MathExprLexer.PIPE = 10;
MathExprLexer.COMMA = 11;
MathExprLexer.SIN = 12;
MathExprLexer.COS = 13;
MathExprLexer.TAN = 14;
MathExprLexer.SQRT = 15;
MathExprLexer.ABS = 16;
MathExprLexer.EXPONENTIAL = 17;
MathExprLexer.LN = 18;
MathExprLexer.LOG = 19;
MathExprLexer.INTEGER = 20;
MathExprLexer.FLOAT = 21;
MathExprLexer.PI = 22;
MathExprLexer.EULER = 23;
MathExprLexer.IMAGINARY_UNIT = 24;
MathExprLexer.IDENTIFIER = 25;
MathExprLexer.WS = 26;



